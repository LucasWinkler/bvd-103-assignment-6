# proxy cache config
proxy_cache_path /var/lib/nginx/cache levels=1:2 keys_zone=backcache:8m max_size=50m;
proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
proxy_cache_valid 200 302 10m;
proxy_cache_valid 404 1m;

upstream books-service {
    server books-service:3000;
}

upstream orders-service {
    server orders-service:3000;
}

upstream warehouse-service {
    server warehouse-service:3000;
}

upstream docs-service {
    server docs-service:3000;
}

server {
    listen 80;

    # common headers
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # cache frontend 
    location / {
        proxy_pass http://front-end:9080/;
        proxy_cache backcache;
        proxy_cache_valid 200 5m;
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status always;
    }

    # cache requests to /api/books
    location = /api/books {
        proxy_pass http://books-service/books;
        proxy_cache backcache;
        proxy_cache_valid 200 30s;
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status always;
    }

    # cache post requests to /api/books/list (unfiltered books)
    # this endpoint supports filters via request body so I needed to set a custom header from our adapter
    # according to the guidebook we should cache unfiltered books, but this endpoint is used for all book fetching and there's no way to invalidate the cache during CRUD operations, therefore I decided to cache it only for 30 seconds
    location = /api/books/list {
        proxy_pass http://books-service/books/list;
        proxy_cache_methods POST;
        proxy_cache backcache;
        proxy_cache_valid 200 30s;
        proxy_cache_bypass $http_x_has_filters $http_cache_control;
        proxy_no_cache $http_x_has_filters $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status always;
    }

    # cache requests to /api/books/{id} (book details)
    # bypass cache if cache control header is set
    location ~ ^/api/books/([^/]+)$ {
        proxy_pass http://books-service/books/$1;
        proxy_cache backcache;
        proxy_cache_valid 200 2m;
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status always;
    }

    # orders api routing
    location /api/orders {
        proxy_pass http://orders-service/orders;
    }

    # warehouse api routing
    location /api/warehouse {
        proxy_pass http://warehouse-service/warehouse;
    }

    # api documentation routing
    location /docs {
        proxy_pass http://docs-service/docs/;
        proxy_cache backcache;
        proxy_cache_valid 200 5m; 
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status always;
    }
}